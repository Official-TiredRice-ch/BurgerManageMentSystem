package final_coding_compile;

import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;


class CircularQueue {
    private int[] queue;
    private int front, rear, size, capacity;

    public CircularQueue(int capacity) {
        this.capacity = capacity;
        this.queue = new int[capacity];
        this.front = this.rear = -1;
        this.size = 0;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public boolean isFull() {
        return size == capacity;
    }

    public void enqueue(int item) {
        if (isFull()) {
            System.out.println("Circular Queue is full. Cannot enqueue.");
            return;
        }

        if (isEmpty()) {
            front = rear = 0;
        } else {
            rear = (rear + 1) % capacity;
        }

        queue[rear] = item;
        size++;
    }

    public int dequeue() {
        if (isEmpty()) {
            System.out.println("Circular Queue is empty. Cannot dequeue.");
            return -1; // Return a sentinel value indicating an empty queue
        }

        int item = queue[front];

        if (front == rear) {
            front = rear = -1;
        } else {
            front = (front + 1) % capacity;
        }

        size--;
        return item;
    }

    public void display() {
        if (isEmpty()) {
            System.out.println("Circular Queue is empty.");
            return;
        }

        System.out.print("Circular Queue elements: ");
        int i = front;
        do {
            System.out.print(queue[i] + " ");
            i = (i + 1) % capacity;
        } while (i != (rear + 1) % capacity);
        System.out.println();
    }
}

class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class QueueArray {
    private int[] queue;
    private int front, rear, size, capacity;

    public QueueArray(int capacity) {
        this.capacity = capacity;
        this.queue = new int[capacity];
        this.front = this.rear = -1;
        this.size = 0;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public boolean isFull() {
        return size == capacity;
    }

    public void enqueue(int item) {
        if (isFull()) {
            System.out.println("\nQueue in Array is full. Cannot enqueue.\n");
            return;
        }

        if (isEmpty()) {
            front = rear = 0;
        } else {
            rear++;
        }

        queue[rear] = item;
        size++;
    }

   public int dequeue(int element) {
    if (isEmpty()) {
        System.out.println("Queue in Array is empty. Cannot dequeue.");
        return -1;
    }

    int index = -1;
    for (int i = front; i <= rear; i++) {
        if (queue[i] == element) {
            index = i;
            break;
        }
    }

    if (index != -1) {
        int dequeuedItem = queue[index];
        for (int i = index; i < rear; i++) {
            queue[i] = queue[i + 1];
        }
        rear--;
        size--;
        return dequeuedItem;
    } else {
        return -1; // Element not found in the queue
    }
}

    public void display() {
        if (isEmpty()) {
            System.out.println("Queue in Array is empty.");
            return;
        }

        System.out.print("Queue in Array elements: ");
        for (int i = front; i <= rear; i++) {
            System.out.print(queue[i] + " ");
        }
        System.out.println();
    }
    
     public int getFront() {
        return isEmpty() ? -1 : queue[front];
    }

    public int getRear() {
        return isEmpty() ? -1 : queue[rear];
    }
}

class QueueLinkedList {
    private Node front, rear;

    public QueueLinkedList() {
        this.front = this.rear = null;
    }

    public boolean isEmpty() {
        return front == null;
    }

    public void enqueue(int item) {
        Node newNode = new Node(item);

        if (isEmpty()) {
            front = rear = newNode;
        } else {
            rear.next = newNode;
            rear = newNode;
        }
    }

    public int dequeue() {
        if (isEmpty()) {
            System.out.println("Queue in Linked List is empty. Cannot dequeue.");
            return -1; // Return a sentinel value indicating an empty queue
        }

        int item = front.data;

        if (front == rear) {
            front = rear = null;
        } else {
            front = front.next;
        }

        return item;
    }

    public void display() {
        if (isEmpty()) {
            System.out.println("Queue in Linked List is empty.");
            return;
        }

        System.out.print("Queue in Linked List elements: ");
        Node current = front;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }
    
    public int getFront() {
        if (this.front != null) {
            return this.front.data;
        } else {
            return -1; // or throw an exception, depending on your design choice
        }
    }

    public int getRear() {
        if (this.rear != null) {
            return this.rear.data;
        } else {
            return -1; // or throw an exception, depending on your design choice
        }
    } 
}

public class Final_Coding_Compile {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            displayMainMenu();
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character

            switch (choice) {
                case 1:
                    System.out.println("\nYou've Selected Arrays");
                    handleArrayMenu(scanner);
                    break;
                case 2:
                    System.out.println("\nYou've Selected Linked List");
                    handleLinkedList(scanner);
                    break;
                case 3:
                    System.out.println("\nYou've Selected Queues");
                    handleQueueMenu(scanner);
                    break;
                case 4:
                    System.out.println("\nYou've Selected Stacks");
                    handleStack(scanner);
                    break;
                case 5:
                    System.out.println("\nYou've Selected Searching");
                    handleSearching(scanner);
                    break;
                case 6:
                    System.out.println("\nYou've Selected Sorting");
                    handleSorting(scanner);
                    break;
                case 7:
                    System.out.println("\nYou've Selected Graphs");
                    handleGraph(scanner);
                    break;
                case 8:
                    System.out.println("\nYou've Selected Trees");
                    handleTrees(scanner);
                    break;
                default:
                    System.out.println("Invalid choice. Please choose again.");
            }

            System.out.print("\nDo you want to try again, like go back to the Main Menu Or No, So That you will Leave The Program?(Yes/No): ");
            String tryAgain = scanner.nextLine();
            if (!tryAgain.equalsIgnoreCase("yes")) {
                break;
            }
        }

        System.out.println("\nProgram Has Been Complete, Louise Larita Is Thank You For Your Time To Use This Code And Now Program is Shutting Down.");
    }
    
    
    
    
private static void displayArray(int[] array) {
        System.out.println("\nElements of the array:");
        for (int i = 0; i < array.length; i++) {
            System.out.println(" "  + array[i]);
        }
    }

    private static int calculateSum(int[] array) {
        int sum = 0;
        for (int value : array) {
            sum += value;
        }
        return sum;
    }

    private static double calculateAverage(int[] array) {
        int sum = calculateSum(array);
        return (double) sum / array.length;
    }

    private static void displayResult(int[] array, char operation) {
        int size = array.length;
        
        switch (operation) {
            case '/':
                System.out.println("\nThe Quotient of " + size + " elements is: " + calculateResult(array, '/'));
                break;
            case '-':
                System.out.println("\nThe Difference of " + size + " elements is: " + calculateResult(array, '-'));
                break;
            case '*':
                System.out.println("\nThe Product of " + size + " elements is: " + calculateResult(array, '*'));
                break;
            case '%':
                System.out.println("\nThe Modulo of " + size + " elements is: " + calculateResult(array, '%'));
                break;
        }
    }

   private static double calculateResult(int[] array, char operation) {
    double result = array[0];

    for (int i = 1; i < array.length; i++) {
        switch (operation) {
            case '/':
                result /= array[i];
                break;
            case '-':
                result -= array[i];
                break;
            case '*':
                result *= array[i];
                break;
            case '%':
                result %= array[i];
                break;
        }
    }

    return result;
}
   
    private static void modifyArray(int[] array, Scanner scanner) {
    System.out.println("Enter the index of the element to modify: ");
    int index = scanner.nextInt();

    if (index >= 0 && index < array.length) {
        System.out.println("Enter the new value for the element at index " + index + ": ");
        array[index] = scanner.nextInt();
        System.out.println("Array Has Been Modified.");
    } else {
        System.out.println("Invalid index. Please enter a valid index within the array bounds.");
   
    
    }
    
    
}

   
    private static void findMaxAndMin(int[] array) {
    int max = Integer.MIN_VALUE;
    int min = Integer.MAX_VALUE;

    for (int element : array) {
        if (element > max) {
            max = element;
        }

        if (element < min) {
            min = element;
        }
    }

    System.out.println("Maximum value: " + max);
    System.out.println("Minimum value: " + min);
}
   
    
   private static int calculate2DArraySum(int[][] matrix) {
        int sum = 0;
        for (int[] row : matrix) {
            for (int element : row) {
                sum += element;
            }
        }
        return sum;
    }

    private static double calculate2DArrayAverage(int[][] matrix) {
        int sum = calculate2DArraySum(matrix);
        int totalElements = matrix.length * matrix[0].length;
        return (double) sum / totalElements;
    }

    private static void display2DArrayResult(int[][] matrix, char operation) {
        int size = matrix.length * matrix[0].length;
        int[] flattenedArray = new int[size];
        int index = 0;

        for (int[] row : matrix) {
            for (int element : row) {
                flattenedArray[index++] = element;
            }
        }

        displayResult(flattenedArray, operation);
    }

    private static void display2DArray(int[][] matrix) {
        System.out.println("\n2D Array Elements:");
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
    }

    private static void displayArrayUsingForEachLoop(int[] array) {
        System.out.println("\nArray Elements:");

        // Using for-each loop to iterate through the array
        for (int element : array) {
            System.out.println(element);
        }
    }

    
    
    private static void handleArrayMenu(Scanner scanner) {
    while (true) {
        displayArrayMenu();
        System.out.print("Enter your choice: ");
        char choice = scanner.next().charAt(0);
        scanner.nextLine(); // Consume the newline character

        switch (choice) {
            case 'E':
                System.out.println("Your Now Exiting Queues Menu");
                
                return;
            case 'A':
                System.out.println("\nYou've Select Single Dimensional Array");
                handleSingleDimensionalArray(scanner);
                break;
            case 'B':
                System.out.println("\nYou've Select Multi Dimensional Array");
                handleMultiDimensionalArray(scanner);
                break;
            case 'C':
                System.out.println("\nYou've Select For-Each-Loop");
                handleForEachLoop(scanner);
                break;
                
            case 'D':
                System.out.println("\nYou've Select Passing Array Method");
                handlePassingArrayMethod(scanner);
                break;
                
            default:
                System.out.println("Invalid choice. Please choose again.");
        }

        System.out.print("Do you want to go back and try again? (yes/no): ");
        String tryAgain = scanner.nextLine();
        if (!tryAgain.equalsIgnoreCase("yes")) {
            System.out.println("Exiting Queue Menu");
            return;
        }
    }
}
    
    private static void handleSingleDimensionalArray(Scanner scanner) {
        System.out.print("Enter the size of the array: ");
        int size = scanner.nextInt();
        int[] array = new int[size];

        System.out.println("Enter " + size + " elements:");
        for (int i = 0; i < size; i++) {
            array[i] = scanner.nextInt();
        }

        displayArray(array);

        while (true) {
            System.out.println("\nArray Operations:");
            System.out.println("[1] Display Sum");
            System.out.println("[2] Display Difference ");
            System.out.println("[3] Display Product");
            System.out.println("[4] Display Quotient");
            System.out.println("[5] Display Average");
            System.out.println("[6] Display Modulo");
            System.out.println("[7] Display The Elements");
            System.out.println("[8] Exit");



            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine();
            switch (choice) {
                case 1:
                    int sum = calculateSum(array);
                    System.out.println("\nThe Sum of " + size + " elements is: " + sum);
                    break;
                case 5:
                    double average = calculateAverage(array);
                    System.out.println("\nAverage of " + size + " elements is: " + average);
                    break;
                case 4:
                    displayResult(array, '/');
                    break;
                case 2:
                    displayResult(array, '-');
                    break;
                case 3:
                    displayResult(array, '*');
                    break;
                case 6:
                    displayResult(array, '%');
                    break;
                    
                case 7:
                    displayArray(array);
                    break;    
                    
                case 8:
                    System.out.println("Exiting Array Operations");
                    return;
                default:
                    System.out.println("Invalid choice. Please enter a valid option.");
            }
        }
    }
   
    public static void handleMultiDimensionalArray (Scanner scanner) {

        System.out.print("\nEnter the number of rows: ");
        int numRows = scanner.nextInt();

        System.out.print("\nEnter the number of columns: ");
        int numCols = scanner.nextInt();

        int[][] matrix = new int[numRows][numCols];

        System.out.println("\nEnter the elements for the 2D array");
        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j < numCols; j++) {
                System.out.print("element at position (" + i + ", " + j + "): ");
                matrix[i][j] = scanner.nextInt();
            }
        }

        display2DArray(matrix);

        while (true) {
            System.out.println("\n2D Array Operations:");
            System.out.println("[1] Display Sum");
            System.out.println("[2] Display Difference ");
            System.out.println("[3] Display Product");
            System.out.println("[4] Display Quotient");
            System.out.println("[5] Display Average");
            System.out.println("[6] Display Modulo");
            System.out.println("[7] Display The Elements");
            System.out.println("[8] Exit");

            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); 
            switch (choice) {
                case 1:
                    int sum = calculate2DArraySum(matrix);
                    System.out.println("\nThe Sum of the 2D array elements is: " + sum);
                    break;
                case 5:
                    double average = calculate2DArrayAverage(matrix);
                    System.out.println("\nAverage of the 2D array elements is: " + average);
                    break;
                case 4:
                    display2DArrayResult(matrix, '/');
                    break;
                case 2:
                    display2DArrayResult(matrix, '-');
                    break;
                case 3:
                    display2DArrayResult(matrix, '*');
                    break;
                case 6:
                    display2DArrayResult(matrix, '%');
                    break;
                case 7:
                    display2DArray(matrix);
                    break;
                case 8:
                    System.out.println("\nExiting 2D Array Operations");
                    return;
                default:
                    System.out.println("Invalid choice. Please enter a valid option.");
            }
        }
    }
    
    private static void handleForEachLoop(Scanner scanner) {
        System.out.print("Enter the size of the array: ");
        int size = scanner.nextInt();
        int[] array = new int[size];

        System.out.println("Enter " + size + " elements:");
        for (int i = 0; i < size; i++) {
            array[i] = scanner.nextInt();
        }

        displayArrayUsingForEachLoop(array);
        
        while (true) {
            System.out.println("For-Each-Loop Operations:");
            
            System.out.println("[1] Exit");

            System.out.print("Enter your choice: ");

            try {
                 
                int choice = scanner.nextInt(); 
                scanner.nextLine();
                switch (choice) {
                    
                        
                    case 1:
                        System.out.println("Exiting Queue Operations");
                        return; // Exit the method
                    default:
                        System.out.println("Invalid choice. Please enter a valid option.");
                }
            } catch (java.util.InputMismatchException e) {
                System.out.println("Invalid input. Please enter a valid integer.");
                scanner.next(); // Consume the invalid input
            }
        }
    }
    
    public static void handlePassingArrayMethod(Scanner scanner) {
    System.out.print("Enter the size of the array: ");
    int size = scanner.nextInt();
    int[] array = new int[size];

    System.out.println("Enter " + size + " elements:");
    for (int i = 0; i < size; i++) {
        array[i] = scanner.nextInt();
    }

    while (true) {
    System.out.println("Array Operations:");

    System.out.println("[1] Modify Array");
    System.out.println("[2] Display Array");
    System.out.println("[3] Find Max and Min");
    System.out.println("[4] Exit");

    System.out.print("Enter your choice: ");

    try {
        int choice = scanner.nextInt();
        scanner.nextLine();

        switch (choice) {
            case 1:
                modifyArray(array, scanner);
              
                break;
            case 2:
                displayArrayUsingForEachLoop(array);
                break;
            case 3:
                findMaxAndMin(array);
                break;
            case 4:
                return; // Exit the method
            default:
                System.out.println("Invalid choice. Please enter a valid option.");
        }
    } catch (java.util.InputMismatchException e) {
        System.out.println("Invalid input. Please enter a valid integer.");
        scanner.next(); // Consume the invalid input
    }
}

}
    
    
    private static void handleLinkedList(Scanner scanner) {
        System.out.println("Linked list logic placeholder");
        // Add your linked list logic here
    }
    
    
    
    
    
    
    private static void handleQueueMenu(Scanner scanner) {
    while (true) {
        displayQueueMenu();
        System.out.print("Enter your choice: ");
        char choice = scanner.next().charAt(0);
        scanner.nextLine(); // Consume the newline character

        switch (choice) {
            case 'E':
                System.out.println("Your Now Exiting Queues Menu");
                
                return;
            case 'A':
                System.out.println("\nYou've Select  Queue in Array\n");
                handleQueueArray(scanner);
                break;
            case 'B':
                System.out.println("\nYou've Select Queue in Linked List\n");
                handleQueueLinkedList(scanner);
                break;
            case 'C':
                System.out.println("\nYou've Select  Circular Queue\n");
                handleCircularQueue(scanner);
                break;
            case 'D':
                System.out.println("\nYou've Select  Priority Queue\n");
                handlePriorityQueue(scanner);
                break;
            default:
                System.out.println("Invalid choice. Please choose again.");
        }

        System.out.print("Do you want to go back and try again? (yes/no): ");
        String tryAgain = scanner.nextLine();
        if (!tryAgain.equalsIgnoreCase("yes")) {
            System.out.println("Exiting Queue Menu");
            return;
        }
    }
}
        
    private static void handleQueueArray(Scanner scanner) {
    System.out.print("\nEnter the capacity of the Queue in Array: ");
    int capacity = scanner.nextInt();
    scanner.nextLine(); // Consume the newline character
    QueueArray queueArray = new QueueArray(capacity);

    System.out.println("\nEnter " + capacity + " elements:");
    for (int i = 0; i < capacity; i++) {
        queueArray.enqueue(scanner.nextInt());
    }
    queueArray.display();

    while (true) {
        System.out.println("\nQueue in Array Operations:");
        System.out.println("[1] Enqueue");
        System.out.println("[2] Dequeue");
        System.out.println("[3] Display Elements");
        System.out.println("[4] Display Front");
        System.out.println("[5] Display Rear");
        System.out.println("[6] Display Front and Rear");
        System.out.println("[7] Exit");

        System.out.print("Enter your choice: ");
        int choice = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character

        switch (choice) {
            case 1:
                System.out.print("\nEnter the element to enqueue: ");
                int elementToEnqueue = scanner.nextInt();
                queueArray.enqueue(elementToEnqueue);
                break;
            case 2:
                System.out.print("\nEnter the element to dequeue: ");
                int elementToDequeue = scanner.nextInt();
                int dequeuedItem = queueArray.dequeue(elementToDequeue);

                if (dequeuedItem != -1) {
                System.out.println("\nDequeued Element: " + dequeuedItem + "\n");
                } else {
                 System.out.println("\nElement " + elementToDequeue + " not found in the queue.\n");
                 }
                break;
            case 3:
                queueArray.display();
                break;
            case 4:
                System.out.println("\nElement " + queueArray.getFront() +" Is Front Of Queue Array\n");
                break;
                
            case 5:
                System.out.println("\nElement " + queueArray.getRear()+" Is Rear Of Queue Array\n");
                break;
            case 6:
                System.out.println("\nFront Element of queue array " + queueArray.getFront());
                System.out.println("Rear Element of queue array " + queueArray.getRear()+"\n");
                break;
            case 7:
                System.out.println("Exiting Queue in Array Operations");
                return; // Exit the method
            default:
                System.out.println("Invalid choice. Please enter a valid option.");
        }
    }
}

    private static void handleQueueLinkedList(Scanner scanner) {
        QueueLinkedList queueLinkedList = new QueueLinkedList();

        System.out.print("Enter Size Of Queue in Linked List: ");
        int numElements = scanner.nextInt();

        System.out.println("Enter " + numElements + " elements:");
        for (int i = 0; i < numElements; i++) {
            queueLinkedList.enqueue(scanner.nextInt());
        }

        queueLinkedList.display();

        while (true) {
            System.out.println("linkList Operations:");
            System.out.println("[1] Enqueue");
            System.out.println("[2] Dequeue");
            System.out.println("[3] Display");
            System.out.println("[4] Display Front");
            System.out.println("[5] Display Rear");
            System.out.println("[6] Display Front And Rear");
            System.out.println("[7] Exit");

            System.out.print("Enter your choice: ");

            try {
                int choice = scanner.nextInt();

                switch (choice) {
                    case 1:
                        System.out.print("Enter the element to enqueue: ");
                        if (scanner.hasNextInt()) {
                            int elementToEnqueue = scanner.nextInt();
                            queueLinkedList.enqueue(elementToEnqueue);
                            System.out.println("Element " + elementToEnqueue + " added to the Queue");
                            queueLinkedList.display();
                        } else {
                            System.out.println("Invalid input. Please enter a valid integer.");
                            scanner.next(); // Consume the invalid input
                        }
                        break;
                    case 2:
                        int dequeuedItem = queueLinkedList.dequeue();
                        if (dequeuedItem != -1) {
                            System.out.println("Element: " + dequeuedItem + " removed from the queue");
                        } else {
                            System.out.println("Queue in Linked List is empty. Cannot dequeue.");
                        }
                        break;
                    case 3:
                        queueLinkedList.display();
                        break;
                    case 4:
                        System.out.println("Front: " + queueLinkedList.getFront());
                        break;
                    case 5:
                        System.out.println("Rear: " + queueLinkedList.getRear());
                        break;
                        
                      case 6:
                        System.out.println("Front Element Of Queue Linked List is : " + queueLinkedList.getFront());
                        System.out.println("Rear Element Of Queue Linked List is: " + queueLinkedList.getRear());
                        break;  
                        
                    case 7:
                        System.out.println("Exiting Queue Operations");
                        return; // Exit the method
                    default:
                        System.out.println("Invalid choice. Please enter a valid option.");
                }
            } catch (java.util.InputMismatchException e) {
                System.out.println("Invalid input. Please enter a valid integer.");
                scanner.next(); // Consume the invalid input
            }
        }
    }
  
    public static void handleCircularQueue(Scanner scanner) {
    System.out.print("\nEnter the capacity of the Circular Queue: ");
    int capacity = scanner.nextInt();
    CircularQueue circularQueue = new CircularQueue(capacity);

    while (true) {
        System.out.println("Circular Queue Operations:");
        System.out.println("[1] Enqueue");
        System.out.println("[2] Dequeue");
        System.out.println("[3] Display");
        System.out.println("[4] Exit");

        System.out.print("Enter your choice: ");
        int choice = scanner.nextInt();

        switch (choice) {
            case 1:
                do {
                    System.out.print("Enter the element to enqueue: ");
                    int elementToEnqueue = scanner.nextInt();
                    circularQueue.enqueue(elementToEnqueue);

                    System.out.print("Add more Elements? (yes/no): ");
                    String addMore = scanner.next();
                    if (!addMore.equalsIgnoreCase("yes")) {
                        break;
                    }
                } while (true);
                break;
            case 2:
                int dequeuedItem = circularQueue.dequeue();
                if (dequeuedItem != -1) {
                    System.out.println("Dequeued item: " + dequeuedItem);
                }
                break;
            case 3:
                circularQueue.display();
                break;
            case 4:
               System.out.println("Exiting Queue Operations");
                    return; // Exit the method
            default:
                System.out.println("Invalid choice. Please enter a valid option.");
        }
    }
}
   
     private static void handlePriorityQueue(Scanner scanner) {
        List<Integer> priorityList = new ArrayList<>();
        int front = -1; // Initialize front to -1, indicating an empty queue
        int rear = -1; // Initialize rear to -1, indicating an empty queue

        // Initialization of the priority queue
        System.out.print("\nEnter the size of the Priority Queue: ");
        int size = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character

        System.out.println("Enter " + size + " elements:");
        for (int i = 0; i < size; i++) {
            int element = scanner.nextInt();
            priorityList.add(element);
        }

        // Sorting the elements
        Collections.sort(priorityList);

        // Update front and rear indices
        front = 0;
        rear = priorityList.size() - 1;

        System.out.println("Priority Queue output:");
        System.out.println(priorityList);

        while (true) {
            System.out.println("\nPriority Queue Operations:");
            System.out.println("[1] Add Element");
            System.out.println("[2] Delete Element");
            System.out.println("[3] Display Elements Of Queue");
            System.out.println("[4] Display Front");
            System.out.println("[5] Display Rear");
            System.out.println("[6] Exit");

            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();

            scanner.nextLine();
            switch (choice) {
                case 1:
                    System.out.print("\nEnter the element to add: ");
                    int elementToAdd = scanner.nextInt();
                    priorityList.add(elementToAdd);
                    Collections.sort(priorityList);
                    rear = priorityList.size() - 1;
                    if (front == -1) {
                        front = 0;
                    }
                    break;
                case 2:
                    if (front != -1 && !priorityList.isEmpty()) {
                        System.out.print("\nEnter the element to delete: ");
                        int elementToDelete = scanner.nextInt();
                        System.out.println("Element " + elementToDelete + " removed from the Priority Queue");
                        priorityList.remove(Integer.valueOf(elementToDelete));
                        if (priorityList.isEmpty()) {
                            // If the last element is removed, reset front and rear
                            front = -1;
                            rear = -1;
                        } else {
                            rear = priorityList.size() - 1;
                        }
                    } else {
                        System.out.println("\nPriority Queue is empty. Cannot delete.");
                    }
                    break;
                case 3:
                    if (front != -1 && rear != -1) {
                        System.out.println("\nPriority Queue elements: " + priorityList);
                    } else {
                        System.out.println("\nPriority Queue is empty.");
                    }
                    break;
                case 4:
                    if (front != -1) {
                        System.out.println("\nFront: " + priorityList.get(front));
                    } else {
                        System.out.println("\nPriority Queue is empty. Front is undefined.");
                    }
                    break;
                case 5:
                    if (rear != -1) {
                        System.out.println("\nRear: " + priorityList.get(rear));
                    } else {
                        System.out.println("Priority Queue is empty. Rear is undefined.");
                    }
                    break;
                case 6:
                    System.out.println("\nExiting Priority Queue Operations");
                    return; // Exit the method
                default:
                    System.out.println("Invalid choice. Please enter a valid option.");
                    break;
            }
        }
    }

    
    
    

    
    
    private static void handleStack(Scanner scanner) {
        System.out.println("Stack logic placeholder");
        // Add your stack logic here
    }

    private static void handleSearching(Scanner scanner) {
        System.out.println("Searching logic placeholder");
        // Add your searching logic here
    }

    private static void handleSorting(Scanner scanner) {
        System.out.println("Sorting logic placeholder");
        // Add your sorting logic here
    }

    private static void handleGraph(Scanner scanner) {
        System.out.println("Graph logic placeholder");
        // Add your graph logic here
    }

    private static void handleTrees(Scanner scanner) {
        System.out.println("Tree logic placeholder");
        // Add your tree logic here
    }

    private static void displayMainMenu() {
        System.out.println("Menu:");
        System.out.println("[1] Array");
        System.out.println("[2] Linked list");
        System.out.println("[3] Queues");
        System.out.println("[4] Stacks");
        System.out.println("[5] Searching");
        System.out.println("[6] Sorting");
        System.out.println("[7] Graph");
        System.out.println("[8] Trees");
        System.out.print("Enter your choice: ");
    }

    private static void displayQueueMenu() {
        System.out.println("\nGiven Menu:");
        System.out.println("[A] Queue in array");
        System.out.println("[B] Queue in linked list");
        System.out.println("[C] Circular Queue");
        System.out.println("[D] Priority Queue");
        System.out.println("[E] Exit?");
        System.out.print("Enter your choice: ");
    }
    
    
    private static void displayArrayMenu() {
        System.out.println("\nGiven Menu:");
        System.out.println("[A] Single Dimensional Array ");
        System.out.println("[B] Multi Dimensional Array");
        System.out.println("[C] For-Each-Loop");
        System.out.println("[D] Passing Array Method");
        System.out.println("[E] Exit?");
        System.out.print("Enter your choice: ");
    }
}
